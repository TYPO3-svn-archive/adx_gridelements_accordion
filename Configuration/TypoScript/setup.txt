
/**
 * lib.tx_adxgridelementsaccordion
 */
lib.tx_adxgridelementsaccordion {

	renderHeading = CASE
	renderHeading {

		if.isTrue.current = 1

		key.current = 1

		header = TEXT
		header {

			required = 1
			field = header
			htmlSpecialChars = 1

			outerWrap = <span class="header"> | </span>
			outerWrap.insertData = 1
		}

		headerFallback < .header
		headerFallback {
			field = header // subheader
		}

		subheader < .header
		subheader {
			field = subheader
			outerWrap = <span class="subheader"> | </span>
		}

		subheaderFallback < .subheader
		subheaderFallback {
			field = subheader // header
		}

		text < .header
		text {
			field = bodytext
			parseFunc =< lib.parseFunc_RTE
			outerWrap = <span class="text"> | </span>
		}

		image =< tt_content.image.20
		image {
			stdWrap.required = 1
			stdWrap.wrap = <span class="image"> | </span>
		}

		imageBackground = LOAD_REGISTER
		imageBackground {

			imageBackgroundStyle.cObject = IMG_RESOURCE
			imageBackgroundStyle.cObject {

				file {

					import = uploads/pics/
					import.field = image
					import.listNum = 0

					width.field = imagewidth
				}

				stdWrap.required = 1
				stdWrap.noTrimWrap = | style="background-image: url('|'); background-repeat: no-repeat;"|
			}
		}

		default = TEXT
		default.value = 
	}

	accordionHeadingAttributes = COA
	accordionHeadingAttributes {

		10 = COA
		10 {

			10 = TEXT
			10.value = accordion-toggle

			20 = TEXT
			20.field = uid
			20.wrap = accordion_item_c | 
			20.noTrimWrap = | ||

			30 = TEXT
			30 {

				value = collapsed

				if.value = {register: accordionActive} - 1
				if.value.stdWrap.insertData = 1
				if.value.prioriCalc = 1
				if.equals.data = register: accordionCount
				if.negate = 1

				noTrimWrap = | ||
			}

			40 = TEXT
			40 {

				value = {$plugin.tx_adxtwitterbootstrap.variables.gridColumns} / {register: accordionColumns}
				stdWrap.insertData = 1
				prioriCalc = 1

				wrap = span | 
				noTrimWrap = | ||
			}

			stdWrap.required = 1
			stdWrap.trim = 1
			stdWrap.noTrimWrap = | class="|"|
		}

		20 = COA
		20 {

			10 = TEXT
			10.value = collapse

			stdWrap.required = 1
			stdWrap.trim = 1
			stdWrap.noTrimWrap = | data-toggle="|"|
		}

		30 = COA
		30 {

			10 = TEXT
			10 {
				field = parentgrid_uid
				if.isTrue.data = register: accordionCollapsible
				wrap = #accordion_c | 
			}

			stdWrap.required = 1
			stdWrap.trim = 1
			stdWrap.noTrimWrap = | data-parent="|"|
		}
	}

	accordionBodyAttributes = COA
	accordionBodyAttributes {

		10 = COA
		10 {

			10 = TEXT
			10.field = uid
			10.wrap = accordion_item_c | 
			10.noTrimWrap = | id="|"|
		}

		20 = COA
		20 {

			10 = TEXT
			10.value = accordion-body

			20 = TEXT
			20.value = collapse
			20.noTrimWrap = | ||

			30 = TEXT
			30.value = row-fluid
			30.noTrimWrap = | ||

			40 = TEXT
			40 {

				value = in

				if.value = {register: accordionActive} - 1
				if.value.stdWrap.insertData = 1
				if.value.prioriCalc = 1
				if.equals.data = register: accordionCount

				noTrimWrap = | ||
			}

			stdWrap.required = 1
			stdWrap.trim = 1
			stdWrap.noTrimWrap = | class="|"|
		}
	}
}


/**
 * plugin.tx_gridelements_pi1.setup.tx_adxgridelementsaccordion
 */
plugin.tx_gridelements_pi1.setup.tx_adxgridelementsaccordion {

	columns.0 {

		renderObj = COA
		renderObj {

			10 = LOAD_REGISTER
			10 {

				accordionCount.data = register: accordionCount
				accordionCount.intval = 1

				accordionColumns.field = parentgrid_flexform_tx_adxgridelementsaccordion_columns
				accordionColumns.override = {$plugin.tx_adxgridelementsaccordion.columns}
				accordionColumns.intval = 1

				accordionActive.field = parentgrid_flexform_tx_adxgridelementsaccordion_active
				accordionActive.override = {$plugin.tx_adxgridelementsaccordion.active}
				accordionActive.intval = 1

				accordionCollapsible.field = parentgrid_flexform_tx_adxgridelementsaccordion_collapsible
				accordionCollapsible.override = {$plugin.tx_adxgridelementsaccordion.collapsible}

				accordionRenderHeading.field = parentgrid_flexform_tx_adxgridelementsaccordion_render_heading
				accordionRenderHeading.override = {$plugin.tx_adxgridelementsaccordion.renderHeading}

				accordionHeadingAttributes.cObject =< lib.tx_adxgridelementsaccordion.accordionHeadingAttributes

				accordionHeading.cObject = COA
				accordionHeading.cObject {

					20 = TEXT
					20.data = register: accordionHeading

					30 = TEXT
					30 {

						data = register: accordionRenderHeading

						split {

							token = ,
							cObjNum = 1

							1.10 =< lib.tx_adxgridelementsaccordion.renderHeading
						}

						typolink {
							parameter.dataWrap = #accordion_item_c{field: uid}
							ATagParams = {register: accordionHeadingAttributes}
							ATagParams.insertData = 1
						}
					}
				}

				accordionBodyAttributes.cObject =< lib.tx_adxgridelementsaccordion.accordionBodyAttributes

				accordionBody.cObject = COA
				accordionBody.cObject {

					20 = TEXT
					20.data = register: accordionBody

					30 = TEXT
					30 {

						cObject =< tt_content
#						cObject.if.isFalse.field = parentgrid_flexform_tx_adxgridelementsaccordion_ajax

						stdWrap.wrap = <div{register: accordionBodyAttributes}><div class="accordion-inner"> | </div></div>
						stdWrap.insertData = 1
					}
				}

				accordionContent.cObject = CASE
				accordionContent.cObject {

					key = outputAndReset
					key.if.value.stdWrap.dataWrap = ({register: accordionCount} % {register: accordionColumns}) + 1
					key.if.value.prioriCalc = 1
					key.if.equals.data = register: accordionColumns

					outputAndReset = COA
					outputAndReset {

						10 = TEXT
						10.data = register: accordionContent

						20 = COA
						20 {

							10 = TEXT
							10 {
								data = register: accordionHeading
								required = 1
								wrap = <div class="accordion-heading row-fluid"> | </div>
							}

							20 = TEXT
							20.data = register: accordionBody

							# reset if last column
							30 = LOAD_REGISTER
							30.accordionHeading = 
							30.accordionBody = 

							wrap = <div class="accordion-group"> | </div>
						}
					}

					default = TEXT
					default.data = register: accordionContent
				}
			}

			20 = LOAD_REGISTER
			20 {
				accordionCount = {register: accordionCount} + 1
				accordionCount.stdWrap.insertData = 1
				accordionCount.prioriCalc = 1
			}
		}

		preCObject = COA
		preCObject {

			10 = LOAD_REGISTER
			10 {

				accordionClasses.cObject = COA
				accordionClasses.cObject {

					10 = TEXT
					10.value = accordion

					20 = TEXT
					20 {
						field = flexform_tx_adxgridelementsaccordion_layout
						required = 1
						noTrimWrap = | ||
					}

					stdWrap.noTrimWrap = | class="|"|
				}
			}

			20 = TEXT
			20.data = register: accordionContent

			30 = COA
			30 {

				10 = TEXT
				10.data = register: accordionHeading
				10.required = 1
				10.wrap = <div class="accordion-heading row-fluid"> | </div>

				20 = TEXT
				20.data = register: accordionBody

				stdWrap.required = 1
				stdWrap.wrap = <div class="accordion-group"> | </div>
			}

			40 = LOAD_REGISTER
			40 {
				accordionCount = 0
				accordionHeading = 
				accordionBody = 
				accordionContent = 
			}
		}

		outerWrap = <div id="accordion_c{field: uid}"{register: accordionClasses}> | </div>
		outerWrap.insertData = 1

		includeFrontEndResources {

			cssInline.1339585170 = LESS
			cssInline.1339585170 {

				forceParse = 1

				compile = FILE
				compile.file = EXT:adx_gridelements_accordion/Resources/Private/LESS/Styles.less

				variables.adxgridelementsaccordionAnimationSpeed.field = flexform_tx_adxgridelementsaccordion_speed
				variables.adxgridelementsaccordionAnimationSpeed.override = {$plugin.tx_adxgridelementsaccordion.speed}
			}

			jsInline.1339585170 = TEXT
			jsInline.1339585170 {

				forceParse = 1

				field = uid

				if.isTrue.field = flexform_tx_adxgridelementsaccordion_slide_to_position
				if.isTrue.override = {$plugin.tx_adxgridelementsaccordion.slideToPosition}

				wrap = #accordion_c | 

				outerWrap = (function($){ $(document).ready(function(){ $(' | ').on('shown', function(event){ $('html, body').animate({ scrollTop: $(event.target).offset().top - ###OFFSET### }, 'slow'); }); }); })(jQuery);
				outerWrap.replacement.10.search = ###OFFSET###
				outerWrap.replacement.10.replace.field = flexform_tx_adxgridelementsaccordion_slide_offset
			}
		}
	}
}