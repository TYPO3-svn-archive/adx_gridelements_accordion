
/**
 * lib.tx_adxgridelementsaccordion
 */
lib.tx_adxgridelementsaccordion {

	rendering {

		header = TEXT
		header {

			required = 1
			field = header
			htmlSpecialChars = 1
			outerWrap = <span class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}header"> | </span>
			outerWrap.insertData = 1

			typolink.parameter.if.isFalse.data = register: linkIsSet
			typolink.parameter.dataWrap = #c{field: uid}

			append = LOAD_REGISTER
			append.linkIsSet = 1
		}

		headerFallback < .header
		headerFallback {
			field = header // subheader
		}

		subheader < .header
		subheader {
			field = subheader
			outerWrap = <span class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}subheader"> | </span>
		}

		subheaderFallback < .subheader
		subheaderFallback {
			field = subheader // header
		}

		text < .header
		text {
			field = bodytext
			parseFunc =< lib.parseFunc_RTE
			outerWrap = <span class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}text"> | </span>
		}

		image =< tt_content.image.20
		image {

			stdWrap.required = 1
			stdWrap.wrap = <span class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}image"> | </span>

			1.imageLinkWrap {

				enable >
				enable = 1
				enable.if.isFalse.data = register: linkIsSet

				typolink >
				typolink.parameter.dataWrap = #c{field: uid}
			}
		}

		imageBackground = LOAD_REGISTER
		imageBackground {

			imageBackgroundStyle.cObject = IMG_RESOURCE
			imageBackgroundStyle.cObject {

				file {

					import = uploads/pics/
					import.field = image
					import.listNum = 0

					width.field = imagewidth
				}

				stdWrap.required = 1
				stdWrap.noTrimWrap = | style="background-image: url('|'); background-repeat: no-repeat;"|
			}
		}

		default = TEXT
		default.value = 
	}
}


/**
 * plugin.tx_gridelements_pi1.setup.tx_adxgridelementsaccordion
 */
plugin.tx_gridelements_pi1.setup.tx_adxgridelementsaccordion {

	columns.0 {

		renderObj = COA
		renderObj {

			10 = LOAD_REGISTER
			10 {

				accordionKey.data = register: accordionKey
				accordionKey.intval = 1

				accordionColumns.field = parentgrid_flexform_tx_adxgridelementsaccordion_columns
				accordionColumns.intval = 1
			}

			20 = LOAD_REGISTER
			20 {

				accordionList.cObject = COA
				accordionList.cObject {

					10 = TEXT
					10.data = register: accordionList

					20 = TEXT
					20 {

						field = parentgrid_flexform_tx_adxgridelementsaccordion_fields

						outerWrap = <li><div class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}list-item-wrap"{register: imageBackgroundStyle}> | </div></li>
						outerWrap.insertData = 1

						split {

							token = ,
							cObjNum = 1

							1.10 = CASE
							1.10 < lib.tx_adxgridelementsaccordion.rendering
							1.10 {
								if.isTrue.current = 1
								key.current = 1
							}
						}

						append = LOAD_REGISTER
						append.linkIsSet = 0
					}
				}

				accordionBody.cObject = COA
				accordionBody.cObject {

					10 = TEXT
					10.data = register: accordionBody

					20 = TEXT
					20 {
						wrap = <div class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}item-content"> | </div>

						cObject =< tt_content
						cObject.if.isFalse.field = parentgrid_flexform_tx_adxgridelementsaccordion_ajax
					}
				}

				accordionContent.cObject = CASE
				accordionContent.cObject {

					key = outputAndReset
					key.if.value.stdWrap.dataWrap = ({register: accordionKey} % {register: accordionColumns}) + 1
					key.if.value.prioriCalc = 1
					key.if.equals.data = register: accordionColumns

					outputAndReset = COA
					outputAndReset {

						10 = TEXT
						10.data = register: accordionContent

						20 = TEXT
						20.data = register: accordionList
						20.required = 1
						20.wrap = <ul class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}controllers"> | </ul><div class="clear"></div>

						30 = TEXT
						30.data = register: accordionBody

						40 = LOAD_REGISTER
						40.accordionList = 
						40.accordionBody = 
					}

					default = TEXT
					default.data = register: accordionContent
				}

				accordionKey.stdWrap.dataWrap = {register: accordionKey} + 1
				accordionKey.prioriCalc = 1
			}
		}

		preCObject = COA
		preCObject {

			10 = LOAD_REGISTER
			10 {

				containerClasses.cObject = COA
				containerClasses.cObject {

					10 = TEXT
					10 {
						value = {$plugin.tx_adxgridelementsaccordion.container.classes}
						required = 1
					}

					20 = TEXT
					20 {
						field = flexform_tx_adxgridelementsaccordion_layout
						required = 1
						noTrimWrap = | {$plugin.tx_adxgridelementsaccordion.cssClassPrefix}||
					}

					stdWrap.trim = 1
				}

				containerStyles = {$plugin.tx_adxgridelementsflexslider.container.styles}

				containerAttributes.cObject = COA
				containerAttributes.cObject {

					10 = TEXT
					10 {
						data = register: containerClasses
						required = 1
						noTrimWrap = | class="|"|
					}

					20 = TEXT
					20 {
						data = register: containerStyles
						required = 1
						noTrimWrap = | style="|"|
					}
				}

				containerSelector.cObject = COA
				containerSelector.cObject {

					10 = TEXT
					10 {
						field = uid
						noTrimWrap = |#c| |
					}

					20 = TEXT
					20 {
						data = register: containerClasses
						replacement.10.search = /\s+/
						replacement.10.replace = .
						replacement.10.useRegExp = 1
						wrap = .|
					}
				}

				jsInline1339585170.cObject = COA
				jsInline1339585170.cObject {

					stdWrap.outerWrap.cObject = COA
					stdWrap.outerWrap.cObject {

						10 = TEXT
						10.data = register: jsInline1339585170

						20 = TEXT
						20.value = (function($){ $(document).ready(function(){

						30 = TEXT
						30.data = register: containerSelector
						30.wrap = $(' | ')

						40 = TEXT
						40.value = .flexaccordion({ | }); }); })(jQuery);
					}

					10 = TEXT
					10.value = pageTypeNum:{$plugin.tx_adxgridelementsaccordion.ajaxPageTypeNum},

					15 = TEXT
					15.if.value = click
					15.if.equals.field = flexform_tx_adxgridelementsaccordion_event
					15.if.negate = 1
					15.dataWrap = event:'{field: flexform_tx_adxgridelementsaccordion_event}',

					20 = TEXT
					20.fieldRequired = flexform_tx_adxgridelementsaccordion_speed
					20.dataWrap = speed:'{field: flexform_tx_adxgridelementsaccordion_speed}',

					25 = TEXT
					25.fieldRequired = flexform_tx_adxgridelementsaccordion_collapsible
					25.dataWrap = collapsible:true,

					30 = TEXT
					30.fieldRequired = flexform_tx_adxgridelementsaccordion_slide
					30.dataWrap = slide:true,

					35 = TEXT
					35.fieldRequired = flexform_tx_adxgridelementsaccordion_active
					35.dataWrap = active:'{field: flexform_tx_adxgridelementsaccordion_active}',

					40 = TEXT
					40.fieldRequired = flexform_tx_adxgridelementsaccordion_ajax
					40.dataWrap = ajax:true,

					45 = TEXT
					45.dataWrap = columns:'{field: flexform_tx_adxgridelementsaccordion_columns}',

					50 = TEXT
					50.value = namespace:'{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}'
				}
			}

			20 = TEXT
			20.data = register: accordionContent

			30 = TEXT
			30.data = register: accordionList
			30.required = 1
			30.wrap = <ul class="{$plugin.tx_adxgridelementsaccordion.cssClassPrefix}controllers"> | </ul>

			40 = TEXT
			40.data = register: accordionBody

			50 = LOAD_REGISTER
			50 {
				accordionKey = 0
				accordionList = 
				accordionBody = 
				accordionContent = 
			}
		}

		outerWrap = <div{register: containerAttributes}> | </div>
		outerWrap.insertData = 1

		includeFrontEndResources {

			cssInline.1339585170 = TEMPLATE
			cssInline.1339585170 {

				forceParse = 1

				template = FILE
				template.file = EXT:adx_gridelements_accordion/Resources/Private/Templates/Styles.css

				marks {

					LOADER_ICON = IMG_RESOURCE
					LOADER_ICON.file = {$plugin.tx_adxgridelementsaccordion.loaderIconFile}

					CSS_CLASS_PREFIX = TEXT
					CSS_CLASS_PREFIX.value = {$plugin.tx_adxgridelementsaccordion.cssClassPrefix}

					COLUMN_SPACE = TEXT
					COLUMN_SPACE.value = {$plugin.tx_adxgridelementsaccordion.gutter}

					COLUMN_WIDTH = TEXT
					COLUMN_WIDTH {

						stdWrap.dataWrap = (100 - ({$plugin.tx_adxgridelementsaccordion.gutter} * ({field: flexform_tx_adxgridelementsaccordion_columns} - 1))) / {field: flexform_tx_adxgridelementsaccordion_columns}
						prioriCalc = 1

						override = 100
						override.if.value = 1
						override.if.equals.field = flexform_tx_adxgridelementsaccordion_columns
					}
				}
			}

			includeJS.1339585170 = EXT:adx_gridelements_accordion/Resources/Public/JavaScript/Accordion.js

			jsInline.1339585170 = TEXT
			jsInline.1339585170 {
				forceParse = 1
				data = register: jsInline1339585170
			}
		}
	}
}

pageAdxGridelementsAccordionAjax = PAGE
pageAdxGridelementsAccordionAjax {

	typeNum = {$plugin.tx_adxgridelementsaccordion.ajaxPageTypeNum}

	config {
		admPanel = 0
		disableAllHeaderCode = 1 
		disableCharsetHeader = 1
		disablePrefixComment = 1
	}

	10 = CONTENT
	10 {
		table = tt_content

		select {
			uidInList.data = GP: tx_adxgridelementsaccordion|uid
			languageField = sys_language_uid
		}
	}
}